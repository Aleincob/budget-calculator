{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class BudgetServiceService {\n  constructor() {\n    this.amounts = []; //porque Amount lleva []\n    this.totalBudget = 0;\n  }\n  addAmount(newAmount) {\n    this.amounts.push(newAmount);\n    this.totalBudget = this.amounts.reduce((cum, curr) => cum + curr.amount, 0);\n  }\n  getAmount() {\n    return this.amounts;\n  }\n  getTotalBudget() {\n    return this.totalBudget;\n  }\n  removeAmount(index) {\n    this.amounts.splice(index, 1);\n  }\n}\nBudgetServiceService.ɵfac = function BudgetServiceService_Factory(t) {\n  return new (t || BudgetServiceService)();\n};\nBudgetServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BudgetServiceService,\n  factory: BudgetServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,oBAAoB;EAG/BC;IAFA,YAAO,GAAa,EAAE,EAAC;IACvB,gBAAW,GAAW,CAAC;EACP;EAEhBC,SAAS,CAACC,SAAiB;IACzB,IAAI,CAACC,OAAO,CAACC,IAAI,CAACF,SAAS,CAAC;IAC5B,IAAI,CAACG,WAAW,GAAG,IAAI,CAACF,OAAO,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACC,MAAM,EAAE,CAAC,CAAC;EAC7E;EAEAC,SAAS;IACP,OAAO,IAAI,CAACP,OAAO;EACrB;EAEAQ,cAAc;IACZ,OAAO,IAAI,CAACN,WAAW;EACzB;EAEAO,YAAY,CAACC,KAAa;IACxB,IAAI,CAACV,OAAO,CAACW,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;EAC/B;;AApBWd,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAgB,SAApBhB,oBAAoB;EAAAiB,YAFnB;AAAM","names":["BudgetServiceService","constructor","addAmount","newAmount","amounts","push","totalBudget","reduce","cum","curr","amount","getAmount","getTotalBudget","removeAmount","index","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\aleca\\Github\\budget-calculator\\src\\app\\budget-service.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Amount } from './models/amount';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BudgetServiceService {\n  amounts: Amount[] = [] //porque Amount lleva []\n  totalBudget: number = 0\n  constructor() { }\n\n  addAmount(newAmount: Amount) {\n    this.amounts.push(newAmount);\n    this.totalBudget = this.amounts.reduce((cum, curr) => cum + curr.amount, 0)\n  }\n\n  getAmount() {\n    return this.amounts\n  }\n\n  getTotalBudget() {\n    return this.totalBudget\n  }\n\n  removeAmount(index: number) {\n    this.amounts.splice(index, 1)\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}